// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_id, username, display_name, password, password_salt, created_at, updated_at, last_logged_in
) VALUES (
    gen_random_uuid(), $1, $2, $3, $4, $5, $6, NULL
) RETURNING pvt_id, user_id, username, display_name, password, password_salt, created_at, updated_at, last_logged_in
`

type CreateUserParams struct {
	Username     string    `json:"username"`
	DisplayName  string    `json:"display_name"`
	Password     []byte    `json:"password"`
	PasswordSalt []byte    `json:"password_salt"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.DisplayName,
		arg.Password,
		arg.PasswordSalt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.PvtID,
		&i.UserID,
		&i.Username,
		&i.DisplayName,
		&i.Password,
		&i.PasswordSalt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoggedIn,
	)
	return i, err
}

const deleteUserDetails = `-- name: DeleteUserDetails :one
DELETE
FROM users
WHERE pvt_id = $1
RETURNING pvt_id, user_id, username, display_name, password, password_salt, created_at, updated_at, last_logged_in
`

func (q *Queries) DeleteUserDetails(ctx context.Context, pvtID int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUserDetails, pvtID)
	var i User
	err := row.Scan(
		&i.PvtID,
		&i.UserID,
		&i.Username,
		&i.DisplayName,
		&i.Password,
		&i.PasswordSalt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoggedIn,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT pvt_id, user_id, username, display_name, password, password_salt, created_at, updated_at, last_logged_in
FROM users
WHERE pvt_id = $1
`

func (q *Queries) GetUserById(ctx context.Context, pvtID int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, pvtID)
	var i User
	err := row.Scan(
		&i.PvtID,
		&i.UserID,
		&i.Username,
		&i.DisplayName,
		&i.Password,
		&i.PasswordSalt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoggedIn,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT pvt_id, user_id, username, display_name, password, password_salt, created_at, updated_at, last_logged_in
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.PvtID,
		&i.UserID,
		&i.Username,
		&i.DisplayName,
		&i.Password,
		&i.PasswordSalt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoggedIn,
	)
	return i, err
}

const getUserByNameAndUuid = `-- name: GetUserByNameAndUuid :one
SELECT pvt_id, user_id, username, display_name, password, password_salt, created_at, updated_at, last_logged_in
FROM users
WHERE user_id = $1 AND username = $2
`

type GetUserByNameAndUuidParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	Username string      `json:"username"`
}

func (q *Queries) GetUserByNameAndUuid(ctx context.Context, arg GetUserByNameAndUuidParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByNameAndUuid, arg.UserID, arg.Username)
	var i User
	err := row.Scan(
		&i.PvtID,
		&i.UserID,
		&i.Username,
		&i.DisplayName,
		&i.Password,
		&i.PasswordSalt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoggedIn,
	)
	return i, err
}

const getUserByUuid = `-- name: GetUserByUuid :one
SELECT pvt_id, user_id, username, display_name, password, password_salt, created_at, updated_at, last_logged_in
FROM users
WHERE user_id = $1
`

func (q *Queries) GetUserByUuid(ctx context.Context, userID pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUuid, userID)
	var i User
	err := row.Scan(
		&i.PvtID,
		&i.UserID,
		&i.Username,
		&i.DisplayName,
		&i.Password,
		&i.PasswordSalt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoggedIn,
	)
	return i, err
}

const updateLoggedInTime = `-- name: UpdateLoggedInTime :exec
UPDATE users
SET last_logged_in = $1
WHERE pvt_id = $2
`

type UpdateLoggedInTimeParams struct {
	LastLoggedIn pgtype.Timestamp `json:"last_logged_in"`
	PvtID        int32            `json:"pvt_id"`
}

func (q *Queries) UpdateLoggedInTime(ctx context.Context, arg UpdateLoggedInTimeParams) error {
	_, err := q.db.Exec(ctx, updateLoggedInTime, arg.LastLoggedIn, arg.PvtID)
	return err
}

const updateUserDetails = `-- name: UpdateUserDetails :one
UPDATE users
SET username = $1, display_name = $2, password = $3, updated_at = $4
WHERE pvt_id = $5
RETURNING pvt_id, user_id, username, display_name, password, password_salt, created_at, updated_at, last_logged_in
`

type UpdateUserDetailsParams struct {
	Username    string    `json:"username"`
	DisplayName string    `json:"display_name"`
	Password    []byte    `json:"password"`
	UpdatedAt   time.Time `json:"updated_at"`
	PvtID       int32     `json:"pvt_id"`
}

func (q *Queries) UpdateUserDetails(ctx context.Context, arg UpdateUserDetailsParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserDetails,
		arg.Username,
		arg.DisplayName,
		arg.Password,
		arg.UpdatedAt,
		arg.PvtID,
	)
	var i User
	err := row.Scan(
		&i.PvtID,
		&i.UserID,
		&i.Username,
		&i.DisplayName,
		&i.Password,
		&i.PasswordSalt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoggedIn,
	)
	return i, err
}
